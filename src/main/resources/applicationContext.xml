<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd
                        http://www.springframework.org/schema/mvc
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
                        http://www.springframework.org/schema/tx
						http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
						http://www.springframework.org/schema/aop
						http://www.springframework.org/schema/aop/spring-aop-3.2.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">
    <task:annotation-driven/>
    <!-- 自动扫描 -->
    <context:component-scan base-package="com.cf.sessiontest.*">
        <!-- 防止SpringMVC和SpringIOC对同一个对象的管理重合 -->
        <context:exclude-filter type="annotation"
                                expression="org.springframework.stereotype.Controller"/>
        <context:exclude-filter type="annotation"
                                expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
    </context:component-scan>

    <context:annotation-config/>

    <!--<aop:aspectj-autoproxy/>-->

    <bean class="com.cf.sessiontest.aspect.LogAspect"></bean>

    <!--&lt;!&ndash; 将session放入redis &ndash;&gt;-->
    <!--<bean class="org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration"/>-->


    <!--<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">-->
        <!--<property name="maxTotal" value="100" />-->
        <!--<property name="maxIdle" value="10" />-->
    <!--</bean>-->

    <!--<bean class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">-->
        <!--<property name="hostName" value="192.168.100.2"/>-->
        <!--<property name="port" value="6379"/>-->
        <!--<property name="password" value="" />-->
        <!--<property name="timeout" value="3000"/>-->
        <!--<property name="usePool" value="true"/>-->
        <!--<property name="poolConfig" ref="jedisPoolConfig"/>-->
    <!--</bean>-->

    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>
                    classpath:jdbc.properties
                </value>
            </list>
        </property>
    </bean>

    <!--<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">-->
        <!--<property name="dataSource" ref="dataSource"/>-->
    <!--</bean>-->

    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="testOnBorrow" value="${jdbc.testOnBorrow}"/>
        <property name="testOnReturn" value="${jdbc.testOnReturn}"/>
        <property name="testWhileIdle" value="true"/>
        <property name="removeAbandoned" value="${jdbc.removeAbandoned}"/>
        <property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}"/>
        <property name="maxWait" value="500" />
        <!-- 自动测试连接是否正常，DBCP连接池 -->
        <property name="validationQuery" value="SELECT 'x' FROM DUAL"/>
        <!-- 连接失败后 好多毫秒之后自动重新连接 -->
        <property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}"/>
        <property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}"/>

    </bean>

    <bean id="dataSource1" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="${jdbc.driverClassName1}"/>
        <property name="url" value="${jdbc.url1}"/>
        <property name="username" value="${jdbc.username1}"/>
        <property name="password" value="${jdbc.password1}"/>
        <property name="testOnBorrow" value="${jdbc.testOnBorrow}"/>
        <property name="testOnReturn" value="${jdbc.testOnReturn}"/>
        <property name="testWhileIdle" value="true"/>
        <property name="removeAbandoned" value="${jdbc.removeAbandoned}"/>
        <property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}"/>
        <property name="maxWait" value="500" />
        <!-- 自动测试连接是否正常，DBCP连接池 -->
        <property name="validationQuery" value="SELECT 'x' FROM DUAL"/>
        <!-- 连接失败后 好多毫秒之后自动重新连接 -->
        <property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}"/>
        <property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}"/>

    </bean>

    <bean id="dataSourceAll" class="com.cf.sessiontest.multidatasource.ThreadLocalRountingDataSource">
        <property name="defaultTargetDataSource" ref="dataSource" />
        <property name="targetDataSources">
            <map key-type="com.cf.sessiontest.multidatasource.DataSources">
                <entry key="MASTER" value-ref="dataSource"/>
                <entry key="SLAVE" value-ref="dataSource1"/>
                <!-- 这里还可以加多个dataSource -->
            </map>
        </property>
    </bean>

    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSourceAll"/>
        <!-- 自动扫描mapping.xml文件
         -->
        <property name="mapperLocations" value="classpath:mapper/*.xml"></property>
        <!-- 实体类位置 -->
        <property name="typeAliasesPackage" value="com.cf.sessiontest.model"/>
        <property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageHelper">
                    <!-- 这里的几个配置主要演示如何使用，如果不理解，一定要去掉下面的配置 -->
                    <property name="properties">
                        <value>
                            pageSizeZero=true
                        </value>
                    </property>
                </bean>
            </array>
        </property>
    </bean>
    <bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.cf.sessiontest.dao"/>
        <!-- 3.2.2版本新特性，markerInterface可以起到mappers配置的作用，详细情况需要看Marker接口类 -->
        <property name="markerInterface" value="com.cf.sessiontest.dao.Dao"/>
        <!-- 通用Mapper通过属性注入进行配置，默认不配置时会注册Mapper<T>接口-->
        <property name="properties">
            <value>
                mappers=tk.mybatis.mapper.common.Mapper
                ORDER=BEFORE
            </value>
        </property>

    </bean>

    <!-- mybatis spring sqlSessionTemplate,使用时直接让spring注入即可 -->
    <!--<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">-->
        <!--<constructor-arg index="0" ref="sqlSessionFactory"></constructor-arg>-->
    <!--</bean>-->

    <!-- PlatformTransactionMnager -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSourceAll"/>
    </bean>

    <!--&lt;!&ndash;&lt;!&ndash; 声明使用注解式事务 &ndash;&gt;&ndash;&gt;-->
    <tx:annotation-driven proxy-target-class="false" transaction-manager="transactionManager"/>
    <!-- 通知 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- 传播行为 -->
            <tx:method rollback-for="java.lang.Exception" name="save*" propagation="REQUIRED"/>
            <tx:method rollback-for="java.lang.Exception" name="register*" propagation="REQUIRED"/>
            <tx:method rollback-for="java.lang.Exception" name="delete*" propagation="REQUIRED"/>
            <tx:method rollback-for="java.lang.Exception" name="create*" propagation="REQUIRED"/>
            <tx:method rollback-for="java.lang.Exception" name="update*" propagation="REQUIRED"/>
            <tx:method rollback-for="java.lang.Exception" name="call*" propagation="REQUIRED"/>
            <tx:method rollback-for="java.lang.Exception" name="initializer*" propagation="REQUIRED"/>
            <tx:method rollback-for="java.lang.Exception" name="find*" propagation="SUPPORTS" read-only="true"/>
            <tx:method rollback-for="java.lang.Exception" name="get*" propagation="SUPPORTS" read-only="true"/>
            <tx:method rollback-for="java.lang.Exception" name="select*" propagation="SUPPORTS" read-only="true"/>
        </tx:attributes>
    </tx:advice>
    <!-- aop -->
    <aop:config>
        <aop:advisor advice-ref="txAdvice" pointcut="execution(* com.cf.sessiontest.*.service.imp.*.*(..))"/>
    </aop:config>

    <!--<aop:aspectj-autoproxy proxy-target-class="false"/>-->

</beans>